# Generated by Django 3.2.10 on 2022-11-18 09:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(max_length=100)),
                ('payment_type', models.CharField(max_length=100)),
                ('account_balance', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('zip', models.CharField(max_length=100)),
                ('registration_random_code', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['id'],
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClientInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateField(auto_now_add=True)),
                ('information', models.JSONField(null=True)),
                ('name', models.CharField(max_length=100)),
                ('account_id', models.CharField(max_length=100)),
                ('user_id', models.CharField(max_length=100)),
                ('installation_date', models.DateField()),
                ('location_country', models.CharField(max_length=100)),
                ('location_state', models.CharField(max_length=100)),
                ('location_city', models.CharField(max_length=100)),
                ('location_address', models.CharField(max_length=100)),
                ('location_zip_code', models.CharField(max_length=100)),
                ('status', models.CharField(default='', max_length=100)),
                ('primary_module', models.JSONField(default=dict)),
                ('api_name', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Inverter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateField(auto_now_add=True)),
                ('make', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('serial_number', models.CharField(default='', max_length=100)),
                ('capacity', models.IntegerField(default=0)),
                ('connected_optimizers', models.IntegerField(default=0)),
                ('sku', models.CharField(default='', max_length=100)),
                ('part_number', models.CharField(default='', max_length=100)),
                ('active', models.BooleanField(default=True)),
                ('arrays_count', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SolarSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateField(auto_now_add=True)),
                ('name', models.CharField(blank=True, max_length=100)),
                ('location_address', models.CharField(blank=True, max_length=100)),
                ('location_longitude', models.FloatField(blank=True, null=True)),
                ('location_latitude', models.FloatField(blank=True, null=True)),
                ('location_city', models.FloatField(blank=True, null=True)),
                ('location_state', models.FloatField(blank=True, null=True)),
                ('location_zip', models.FloatField(blank=True, null=True)),
                ('monitor_id', models.CharField(blank=True, max_length=100)),
                ('total_capacity', models.IntegerField(default=0)),
                ('inverters_count', models.IntegerField(default=0)),
                ('arrays_count', models.IntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SolarEdgeSystemActualEnergyProduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateField(auto_now_add=True)),
                ('output', models.JSONField()),
                ('last_requested_date', models.DateField(blank=True, null=True)),
                ('solar_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.solarsystem')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SolarArray',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateField(auto_now_add=True)),
                ('panel_make', models.CharField(max_length=100)),
                ('panel_model', models.CharField(blank=True, max_length=100)),
                ('module_capacity', models.IntegerField()),
                ('azimuth', models.IntegerField()),
                ('tilt_angle', models.IntegerField()),
                ('losses', models.IntegerField(default=0)),
                ('module_type', models.IntegerField(default=1)),
                ('array_type', models.IntegerField(default=1)),
                ('number_of_modules', models.IntegerField(default=1)),
                ('shaded_conditions', models.BooleanField(default=False)),
                ('note', models.CharField(max_length=100)),
                ('last_pvwatts_call', models.DateField(blank=True)),
                ('pvwatts_object_id', models.IntegerField(blank=True, default=0)),
                ('inverter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.inverter')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PVWattsArrayInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateField(auto_now_add=True)),
                ('output', models.JSONField()),
                ('solar_array', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.solararray')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.AddField(
            model_name='inverter',
            name='system',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.solarsystem'),
        ),
    ]
