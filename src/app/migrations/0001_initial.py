# Generated by Django 3.2.10 on 2022-12-13 05:00

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('zip', models.CharField(max_length=100)),
                ('company', models.CharField(max_length=100)),
                ('registration_random_code', models.CharField(max_length=100)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['id'],
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Spreadsheet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('date_added', models.DateField()),
                ('last_updated', models.DateField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='SpreadsheetRow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index_in_sheet', models.IntegerField()),
                ('company_ticker', models.CharField(blank=True, max_length=100)),
                ('year', models.IntegerField()),
                ('company', models.CharField(blank=True, max_length=100)),
                ('cofileinitals', models.CharField(blank=True, max_length=100)),
                ('ESG_spending_numerical_category', models.IntegerField()),
                ('csr_spending_amount_millions_USD', models.FloatField(blank=True, null=True)),
                ('csr_spending_description', models.CharField(blank=True, max_length=1000)),
                ('pledge', models.IntegerField(null=True)),
                ('overmultipleyears', models.IntegerField(null=True)),
                ('rationumbersreported', models.FloatField(null=True)),
                ('rationumbersreportedinUS', models.FloatField(null=True)),
                ('rationumbersreportedGlobal', models.FloatField(null=True)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('number_of_employees', models.IntegerField(null=True)),
                ('company_revenue', models.FloatField(blank=True, null=True)),
                ('company_market_value', models.FloatField(blank=True, null=True)),
                ('industry_numerical_subcategory', models.IntegerField(null=True)),
                ('industry_subcategory_description', models.CharField(blank=True, max_length=100)),
                ('industry_category', models.CharField(blank=True, max_length=100)),
                ('industry_category_description', models.CharField(blank=True, max_length=100)),
                ('ESG_spending_category', models.CharField(blank=True, max_length=100)),
                ('ESG_spending_category_description', models.CharField(blank=True, max_length=100)),
                ('company_region', models.CharField(blank=True, max_length=100)),
                ('date_added', models.DateField(auto_now_add=True)),
                ('spreadsheet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.spreadsheet')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
    ]
